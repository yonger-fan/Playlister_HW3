{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  ADD_NEW_SONG: \"ADD_NEW_SONG\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  LIST_FOR_DELETION: \"LIST_FOR_DELETION\",\n  MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\",\n  DELETE_SONG: \"DELETE_SONG\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    markListDeletion: null,\n    markListDeleteId: 0,\n    markSongDeletion: null,\n    markListDeleteIndex: 0\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.ADD_NEW_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListDeletion: payload,\n            markListDeleteId: payload._id\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_SONG_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListDeletion: payload,\n            markListDeleteIndex: markListDeleteIndex\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.DELETE_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListDeletion: null,\n            markListDeleteIndex: 0\n          });\n        }\n\n      case GlobalStoreActionType.LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListDeletion: null,\n            markListDeleteId: 0\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true\n          });\n        }\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n\n          if (response.data.success) {\n            storeReducer({\n              type: GlobalStoreActionType.CHANGE_LIST_NAME,\n              payload: {\n                playlist: playlist\n              }\n            });\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      let newName = \"Untitled\";\n      let newList = {\n        name: newName,\n        songs: []\n      };\n      let response = await api.createPlaylist(newList);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        async function getListPairs() {\n          response = await api.getPlaylistPairs();\n\n          if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            storeReducer({\n              type: GlobalStoreActionType.CHANGE_LIST_NAME,\n              payload: {\n                idNamePairs: pairsArray,\n                playlist: playlist\n              }\n            });\n          }\n        }\n\n        getListPairs(playlist);\n      }\n    }\n\n    asyncCreateNewList();\n  };\n\n  store.addSong = function () {\n    async function asyncAddNewSong() {\n      let newName = \"Untitled\";\n      let newArtist = \"Undefined\";\n      let newId = \"dQw4w9WgXcQ\";\n      let id = store.currentList._id;\n      let newSong = {\n        title: newName,\n        artist: newArtist,\n        youTubeId: newId\n      };\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        let len = playlist.songs.length;\n        playlist.songs[len] = newSong;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(id, playlist); //playlist = response.data.playlist;\n\n          if (response.data.success) {\n            storeReducer({\n              type: GlobalStoreActionType.ADD_NEW_SONG,\n              payload: {\n                playlist: playlist\n              }\n            });\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncAddNewSong();\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.deleteList = function (id) {\n    store.showDeleteListModal();\n\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: playlist\n          });\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.deleteSong = function (index) {\n    store.showDeleteSongModal();\n\n    async function asyncSetCurrentList() {\n      let response = await api.getPlaylistById(store.currentList._id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n            markListDeleteIndex: index,\n            payload: playlist\n          });\n        }\n      }\n    }\n\n    asyncSetCurrentList();\n  };\n\n  store.remove = function (index) {\n    async function asyncSetCurrentList(index) {\n      let response = await api.getPlaylistById(store.currentList._id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.songs.splice(index, 1);\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(store.currentList._id, playlist); //playlist = response.data.playlist;\n\n          if (response.data.success) {\n            storeReducer({\n              type: GlobalStoreActionType.DELETE_SONG,\n              payload: {\n                playlist: playlist\n              }\n            });\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncSetCurrentList(index);\n  };\n\n  store.delete = function (id) {\n    async function asyncDeleteList(id) {\n      let response = await api.deletePlaylistById(id);\n      let playlist = response.data.playlist;\n\n      if (response.data.success) {\n        async function getListPairs() {\n          response = await api.getPlaylistPairs();\n\n          if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            storeReducer({\n              type: GlobalStoreActionType.LIST_FOR_DELETION,\n              payload: {\n                idNamePairs: pairsArray,\n                playlist: playlist\n              }\n            });\n          }\n        }\n\n        getListPairs();\n      }\n    }\n\n    asyncDeleteList(id);\n  };\n\n  store.showDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n\n  store.hideDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n\n  store.showDeleteSongModal = () => {\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.add(\"is-visible\");\n  }; // THIS FUNCTION IS FOR HIDING THE MODAL\n\n\n  store.hideDeleteSongModal = () => {\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"BU11cMjQzNkBLvGZ4NU9iZW6t6k=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","ADD_NEW_SONG","MARK_LIST_FOR_DELETION","LIST_FOR_DELETION","MARK_SONG_FOR_DELETION","DELETE_SONG","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","markListDeletion","markListDeleteId","markSongDeletion","markListDeleteIndex","storeReducer","action","type","payload","playlist","_id","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","closeCurrentList","createNewList","asyncCreateNewList","newList","songs","createPlaylist","getListPairs","getPlaylistPairs","pairsArray","addSong","asyncAddNewSong","newArtist","newId","newSong","title","artist","youTubeId","len","length","loadIdNamePairs","asyncLoadIdNamePairs","console","log","setCurrentList","asyncSetCurrentList","history","push","deleteList","showDeleteListModal","deleteSong","index","showDeleteSongModal","remove","splice","delete","asyncDeleteList","deletePlaylistById","modal","document","getElementById","classList","add","hideDeleteListModal","hideDeleteSongModal","getPlaylistSize","undo","undoTransaction","redo","doTransaction","setlistNameActive"],"sources":["/Users/yongerfan/Desktop/playlister_hw3/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    ADD_NEW_SONG: \"ADD_NEW_SONG\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    LIST_FOR_DELETION:\"LIST_FOR_DELETION\",\n    MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\",\n    DELETE_SONG:\"DELETE_SONG\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        markListDeletion: null,\n        markListDeleteId: 0,\n        markSongDeletion: null,\n        markListDeleteIndex: 0\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false\n                })\n            }\n\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.ADD_NEW_SONG: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                })\n            }\n\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markListDeletion: payload,\n                    markListDeleteId: payload._id\n                });\n            }\n\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_SONG_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markListDeletion: payload,\n                    markListDeleteIndex: markListDeleteIndex\n                });\n            }\n\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.DELETE_SONG: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markListDeletion: null,\n                    markListDeleteIndex: 0\n                });\n            }\n\n            case GlobalStoreActionType.LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markListDeletion: null,\n                    markListDeleteId: 0\n                });\n            }\n\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true\n                });\n            }\n\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true\n                });\n            }\n\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        storeReducer({\n                            type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                            payload: {\n                                playlist: playlist\n                                    }\n                        });\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    store.createNewList = function () {\n        async function asyncCreateNewList() {\n            let newName = \"Untitled\";\n\n            let newList = {\n                name: newName,\n                songs: []\n            }\n            let response = await api.createPlaylist(newList);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                async function getListPairs() {\n                    response = await api.getPlaylistPairs();\n                    if (response.data.success) {\n                        let pairsArray = response.data.idNamePairs;\n                        storeReducer({\n                            type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                            payload: {\n                                idNamePairs: pairsArray,\n                                playlist: playlist\n                            }\n                        });\n                    }\n                }\n                getListPairs(playlist);\n            }\n\n        }\n        asyncCreateNewList();\n    }\n\n    store.addSong = function () {\n        async function asyncAddNewSong() {\n         \n            let newName = \"Untitled\";\n            let newArtist = \"Undefined\";\n            let newId = \"dQw4w9WgXcQ\";\n            let id = store.currentList._id;\n\n            let newSong = {\n                title : newName,\n                artist : newArtist,\n                youTubeId : newId\n            }\n\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                let len = playlist.songs.length;\n                playlist.songs[len] = newSong;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(id, playlist);\n                    //playlist = response.data.playlist;\n                    if (response.data.success) {\n                        storeReducer({\n                            type: GlobalStoreActionType.ADD_NEW_SONG,\n                            payload: {\n                                playlist: playlist\n                            }\n                        });\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncAddNewSong();\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n\n    store.deleteList = function(id) {\n        store.showDeleteListModal();\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                        payload: playlist\n                    })\n                }\n            }\n        }\n        asyncSetCurrentList(id)\n    }\n\n    store.deleteSong = function(index) {\n        store.showDeleteSongModal();\n        async function asyncSetCurrentList() {\n            let response = await api.getPlaylistById(store.currentList._id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n                        markListDeleteIndex : index,\n                        payload: playlist\n                    })\n                }\n            }\n        }\n        asyncSetCurrentList()\n    }\n\n    store.remove = function(index) {\n        async function asyncSetCurrentList(index) {\n            let response = await api.getPlaylistById(store.currentList._id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.songs.splice(index, 1);\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(store.currentList._id, playlist);\n                    //playlist = response.data.playlist;\n                    if (response.data.success) {\n                        storeReducer({\n                            type: GlobalStoreActionType.DELETE_SONG,\n                            payload: {\n                                playlist: playlist\n                            }\n                        });\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncSetCurrentList(index)\n    }\n\n    store.delete = function(id) {\n        async function asyncDeleteList(id) {\n            let response = await api.deletePlaylistById(id);\n            let playlist = response.data.playlist;\n            if (response.data.success) {\n                async function getListPairs() {\n                    response = await api.getPlaylistPairs();\n                    if (response.data.success) {\n                        let pairsArray = response.data.idNamePairs;\n                        storeReducer({\n                            type: GlobalStoreActionType.LIST_FOR_DELETION,\n                            payload: {\n                               idNamePairs: pairsArray,\n                               playlist: playlist\n                            }\n                        })\n                    }\n                }\n                getListPairs()\n            }\n        }\n        asyncDeleteList(id)\n    }\n\n    store.showDeleteListModal = function () {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n\n    store.hideDeleteListModal = function (){\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n    store.showDeleteSongModal =() =>{\n        let modal = document.getElementById(\"delete-song-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n    // THIS FUNCTION IS FOR HIDING THE MODAL\n    store.hideDeleteSongModal =() =>{\n        let modal = document.getElementById(\"delete-song-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}