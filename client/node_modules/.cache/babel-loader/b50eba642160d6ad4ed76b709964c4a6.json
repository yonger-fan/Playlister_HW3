{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.ADD_NEW_SONG:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true\n          });\n        }\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n\n          if (response.data.success) {\n            storeReducer({\n              type: GlobalStoreActionType.CHANGE_LIST_NAME,\n              payload: {\n                playlist: playlist\n              }\n            });\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      let newName = \"Untitled\";\n      let newList = {\n        name: newName,\n        songs: []\n      };\n      let response = await api.createPlaylist(newList);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        async function getListPairs() {\n          response = await api.getPlaylistPairs();\n\n          if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            storeReducer({\n              type: GlobalStoreActionType.CHANGE_LIST_NAME,\n              payload: {\n                idNamePairs: pairsArray,\n                playlist: playlist\n              }\n            });\n          }\n        }\n\n        getListPairs(playlist);\n      }\n    }\n\n    asyncCreateNewList();\n  };\n\n  store.addSong = function () {\n    async function asyncAddNewSong() {\n      let newName = \"Untitled\";\n      let newArtist = \"Undefined\";\n      let newId = \"dQw4w9WgXcQ\";\n      let id = store.currentList._id;\n      let newSong = {\n        title: newName,\n        artist: newArtist,\n        youTubeId: newId\n      };\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        let len = playlist.songs.length;\n        playlist.songs[len] = newSong;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(id, playlist);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.ADD_NEW_SONG,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncAddNewSong();\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"5esZRSaCUwjeueF8RbldueI12xo=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","storeReducer","action","type","payload","playlist","ADD_NEW_SONG","MARK_LIST_FOR_DELETION","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","_id","closeCurrentList","createNewList","asyncCreateNewList","newList","songs","createPlaylist","getListPairs","getPlaylistPairs","pairsArray","addSong","asyncAddNewSong","newArtist","newId","newSong","title","artist","youTubeId","len","length","loadIdNamePairs","asyncLoadIdNamePairs","console","log","setCurrentList","asyncSetCurrentList","history","push","getPlaylistSize","undo","undoTransaction","redo","doTransaction","setlistNameActive"],"sources":["/Users/yongerfan/Desktop/playlister_hw3/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false\n                })\n            }\n\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.ADD_NEW_SONG: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                })\n            }\n\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true\n                });\n            }\n\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true\n                });\n            }\n\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        storeReducer({\n                            type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                            payload: {\n                                playlist: playlist\n                                    }\n                        });\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    store.createNewList = function () {\n        async function asyncCreateNewList() {\n            let newName = \"Untitled\";\n\n            let newList = {\n                name: newName,\n                songs: []\n            }\n            let response = await api.createPlaylist(newList);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                async function getListPairs() {\n                    response = await api.getPlaylistPairs();\n                    if (response.data.success) {\n                        let pairsArray = response.data.idNamePairs;\n                        storeReducer({\n                            type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                            payload: {\n                                idNamePairs: pairsArray,\n                                playlist: playlist\n                            }\n                        });\n                    }\n                }\n                getListPairs(playlist);\n            }\n\n        }\n        asyncCreateNewList();\n    }\n\n    store.addSong = function () {\n        async function asyncAddNewSong() {\n         \n            let newName = \"Untitled\";\n            let newArtist = \"Undefined\";\n            let newId = \"dQw4w9WgXcQ\";\n            let id = store.currentList._id;\n\n            let newSong = {\n                title : newName,\n                artist : newArtist,\n                youTubeId : newId\n            }\n\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                let len = playlist.songs.length;\n                playlist.songs[len] = newSong;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.ADD_NEW_SONG,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncAddNewSong();\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}