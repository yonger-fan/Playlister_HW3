{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction';\nimport CreateSong_Transaction from '../transactions/CreateSong_Transaction';\nimport RemoveSong_Transaction from '../transactions/RemoveSong_Transaction';\nimport UpdateSong_Transaction from '../transactions/UpdataSong_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  ADD_NEW_SONG: \"ADD_NEW_SONG\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  LIST_FOR_DELETION: \"LIST_FOR_DELETION\",\n  MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\",\n  DELETE_SONG: \"DELETE_SONG\",\n  DRAG_LIST: \"DRAG_LIST\",\n  MARK_SONG_FOR_EDITION: \"MARK_SONG_FOR_EDITION\",\n  EDIT_SONG: \"EDIT_SONG\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    markDeletion: null,\n    markListDeletion: null,\n    markListDeleteId: 0,\n    markSongDeleteIndex: 0,\n    markEditSongIndex: 0,\n    markListEdit: null,\n    oldTitle: null,\n    oldArtist: null,\n    oldYouTubeId: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.ADD_NEW_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markDeletion: payload,\n            markListDeleteId: payload._id\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_SONG_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markSongDeleteIndex: payload.markListDeleteIndex,\n            markListDeletion: payload.markListDeletion\n          });\n        }\n      // PREPARE TO Edit A LIST\n\n      case GlobalStoreActionType.MARK_SONG_FOR_EDITION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markEditSongIndex: payload.markEditSongIndex,\n            markListEdit: payload.markListEdit,\n            oldTitle: payload.oldTitle,\n            oldArtist: payload.oldArtist,\n            oldYouTubeId: payload.oldYouTubeId\n          });\n        }\n      // PREPARE TO Edit A LIST\n\n      case GlobalStoreActionType.EDIT_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markEditSongIndex: 0,\n            markListEdit: null\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.DELETE_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListDeletion: null,\n            markListDeleteIndex: 0\n          });\n        }\n\n      case GlobalStoreActionType.LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListDeletion: null,\n            markListDeleteId: 0\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n\n      case GlobalStoreActionType.DRAG_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n\n          async function getListPairs() {\n            response = await api.getPlaylistPairs();\n\n            if (response.data.success) {\n              let pairsArray = response.data.idNamePairs;\n              storeReducer({\n                type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                payload: {\n                  idNamePairs: pairsArray,\n                  playlist: playlist\n                }\n              });\n            }\n          }\n\n          getListPairs(playlist);\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      let newName = \"Untitled\";\n      let newList = {\n        name: newName,\n        songs: []\n      };\n      let response = await api.createPlaylist(newList);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        async function getListPairs() {\n          response = await api.getPlaylistPairs();\n\n          if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            storeReducer({\n              type: GlobalStoreActionType.CREATE_NEW_LIST,\n              payload: {\n                idNamePairs: pairsArray,\n                playlist: playlist\n              }\n            });\n          }\n        }\n\n        getListPairs(playlist);\n      }\n    }\n\n    asyncCreateNewList();\n  };\n\n  store.addAddSongTransaction = function () {\n    let transaction = new CreateSong_Transaction(store, store.currentList.songs.length);\n    tps.addTransaction(transaction);\n  };\n\n  store.addSong = function () {\n    async function asyncAddNewSong() {\n      let newName = \"Untitled\";\n      let newArtist = \"Undefined\";\n      let newId = \"dQw4w9WgXcQ\";\n      let id = store.currentList._id;\n      let newSong = {\n        title: newName,\n        artist: newArtist,\n        youTubeId: newId\n      };\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        let len = playlist.songs.length;\n        playlist.songs[len] = newSong;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(id, playlist); //playlist = response.data.playlist;\n\n          if (response.data.success) {\n            storeReducer({\n              type: GlobalStoreActionType.ADD_NEW_SONG,\n              payload: {\n                playlist: playlist\n              }\n            });\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncAddNewSong();\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.deleteList = function (id) {\n    store.showDeleteListModal();\n\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: playlist\n          });\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.deleteSong = function (index) {\n    store.showDeleteSongModal();\n\n    async function asyncSetCurrentList() {\n      let response = await api.getPlaylistById(store.currentList._id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n            payload: {\n              markListDeleteIndex: index,\n              markListDeletion: playlist\n            }\n          });\n        }\n      }\n    }\n\n    asyncSetCurrentList();\n  };\n\n  store.remove = function (index) {\n    async function asyncSetCurrentList(index) {\n      let response = await api.getPlaylistById(store.currentList._id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.songs.splice(index, 1);\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(store.currentList._id, playlist); //playlist = response.data.playlist;\n\n          if (response.data.success) {\n            storeReducer({\n              type: GlobalStoreActionType.DELETE_SONG,\n              payload: {\n                playlist: playlist\n              }\n            });\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncSetCurrentList(index);\n  };\n\n  store.createSong = function (stack1, stack2) {\n    let list = store.currentList;\n    let arr = [];\n    let index = stack2.pop();\n    let data = stack1.pop();\n    let j = 0;\n\n    for (let i = 0; i <= list.songs.length; i++) {\n      if (i === index) {\n        arr[i] = data;\n      } else {\n        arr[i] = list.songs[j];\n        j++;\n      }\n    }\n\n    async function updateList(list) {\n      let response = await api.updatePlaylistById(store.currentList._id, list);\n      let playlist = response.data.playlist;\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.ADD_NEW_SONG,\n          payload: {\n            playlist: playlist\n          }\n        });\n      }\n    }\n\n    updateList(list);\n  };\n\n  store.delete = function (id) {\n    async function asyncDeleteList(id) {\n      let response = await api.deletePlaylistById(id);\n      let playlist = response.data.playlist;\n\n      if (response.data.success) {\n        async function getListPairs() {\n          response = await api.getPlaylistPairs();\n\n          if (response.data.success) {\n            let pairsArray = response.data.idNamePairs;\n            storeReducer({\n              type: GlobalStoreActionType.LIST_FOR_DELETION,\n              payload: {\n                idNamePairs: pairsArray,\n                playlist: playlist\n              }\n            });\n          }\n        }\n\n        getListPairs();\n      }\n    }\n\n    asyncDeleteList(id);\n  };\n\n  store.editSong = function (index, song) {\n    let t = song.title;\n    let a = song.artist;\n    let y = song.youTubeId;\n    store.showEditSongModal(t, a, y);\n\n    async function asyncSetCurrentSong() {\n      let response = await api.getPlaylistById(store.currentList._id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.MARK_SONG_FOR_EDITION,\n            payload: {\n              markEditSongIndex: index,\n              markListEdit: playlist,\n              oldTitle: t,\n              oldArtist: a,\n              oldYouTubeId: y\n            }\n          });\n        }\n      }\n    }\n\n    asyncSetCurrentSong();\n  };\n\n  store.editMarkedSong = function (index) {\n    let newTitle = document.getElementById(\"tname\").value; //new value\n\n    let newArtist = document.getElementById(\"aname\").value; //new value\n\n    let newYouTubeId = document.getElementById(\"yname\").value; //new value\n\n    store.addEditSongTransaction(store.oldTitle, store.oldArtist, store.oldYouTubeId, newTitle, newArtist, newYouTubeId, index); //this.hideEditSongModal();\n  };\n\n  store.edit = function (title, artist, youTubeId, index) {\n    async function asyncEditSong(index) {\n      let response = await api.getPlaylistById(store.currentList._id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.songs[index].title = title;\n        playlist.songs[index].artist = artist;\n        playlist.songs[index].youTubeId = youTubeId;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n\n          if (response.data.success) {\n            let playlist = response.data.playlist;\n            storeReducer({\n              type: GlobalStoreActionType.EDIT_SONG,\n              payload: {\n                playlist: playlist\n              }\n            });\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncEditSong(index);\n  };\n\n  store.moveSong = function (start, end) {\n    let list = store.currentList; // WE NEED TO UPDATE THE STATE FOR THE APP\n\n    if (start < end) {\n      let temp = list.songs[start];\n\n      for (let i = start; i < end; i++) {\n        list.songs[i] = list.songs[i + 1];\n      }\n\n      list.songs[end] = temp;\n    } else if (start > end) {\n      let temp = list.songs[start];\n\n      for (let i = start; i > end; i--) {\n        list.songs[i] = list.songs[i - 1];\n      }\n\n      list.songs[end] = temp;\n    }\n\n    async function updateList(list) {\n      let response = await api.updatePlaylistById(list._id, list);\n      list = response.data.playlist;\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.DRAG_LIST,\n          payload: {\n            playlist: list\n          }\n        });\n      }\n    }\n\n    updateList(list);\n  };\n\n  store.addMoveSongTransaction = function (start, end) {\n    let transaction = new MoveSong_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  store.addRemoveSongTransaction = function (index) {\n    let stack1 = [];\n    let stack2 = [];\n    let song = store.currentList.songs[index];\n    let transaction = new RemoveSong_Transaction(store, stack1, stack2, index, song);\n    tps.addTransaction(transaction);\n  };\n\n  store.addEditSongTransaction = function (oldTitle, oldArtist, oldSongId, newTitle, newArtist, newSongId, index) {\n    let transaction = new UpdateSong_Transaction(store, oldTitle, oldArtist, oldSongId, newTitle, newArtist, newSongId, index);\n    tps.addTransaction(transaction);\n  };\n\n  store.showDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n\n  store.hideDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n\n  store.showDeleteSongModal = function () {\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.add(\"is-visible\");\n  }; // THIS FUNCTION IS FOR HIDING THE MODAL\n\n\n  store.hideDeleteSongModal = function () {\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n\n  store.showEditSongModal = function (t, a, y) {\n    let modal = document.getElementById(\"edit-song-modal\");\n    document.getElementById(\"tname\").value = t;\n    document.getElementById(\"aname\").value = a;\n    document.getElementById(\"yname\").value = y;\n    modal.classList.add(\"is-visible\");\n  };\n\n  store.hideEditSongModal = function () {\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"5odssVa5w7Xe5UzXEloLyOSE1j0=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","MoveSong_Transaction","CreateSong_Transaction","RemoveSong_Transaction","UpdateSong_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","ADD_NEW_SONG","MARK_LIST_FOR_DELETION","LIST_FOR_DELETION","MARK_SONG_FOR_DELETION","DELETE_SONG","DRAG_LIST","MARK_SONG_FOR_EDITION","EDIT_SONG","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","markDeletion","markListDeletion","markListDeleteId","markSongDeleteIndex","markEditSongIndex","markListEdit","oldTitle","oldArtist","oldYouTubeId","storeReducer","action","type","payload","playlist","_id","markListDeleteIndex","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","createNewList","asyncCreateNewList","newList","songs","createPlaylist","addAddSongTransaction","transaction","length","addTransaction","addSong","asyncAddNewSong","newArtist","newId","newSong","title","artist","youTubeId","len","loadIdNamePairs","asyncLoadIdNamePairs","console","log","setCurrentList","asyncSetCurrentList","history","push","deleteList","showDeleteListModal","deleteSong","index","showDeleteSongModal","remove","splice","createSong","stack1","stack2","list","arr","pop","j","i","delete","asyncDeleteList","deletePlaylistById","editSong","song","t","a","y","showEditSongModal","asyncSetCurrentSong","editMarkedSong","newTitle","document","getElementById","value","newYouTubeId","addEditSongTransaction","edit","asyncEditSong","moveSong","start","end","temp","addMoveSongTransaction","addRemoveSongTransaction","oldSongId","newSongId","modal","classList","add","hideDeleteListModal","hideDeleteSongModal","hideEditSongModal","getPlaylistSize","undo","undoTransaction","redo","doTransaction","setlistNameActive"],"sources":["/Users/yongerfan/Desktop/playlister_hw3/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction';\nimport CreateSong_Transaction from '../transactions/CreateSong_Transaction';\nimport RemoveSong_Transaction from '../transactions/RemoveSong_Transaction';\nimport UpdateSong_Transaction from '../transactions/UpdataSong_Transaction';\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    ADD_NEW_SONG: \"ADD_NEW_SONG\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    LIST_FOR_DELETION:\"LIST_FOR_DELETION\",\n    MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\",\n    DELETE_SONG:\"DELETE_SONG\",\n    DRAG_LIST:\"DRAG_LIST\",\n    MARK_SONG_FOR_EDITION: \"MARK_SONG_FOR_EDITION\",\n    EDIT_SONG: \"EDIT_SONG\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        markDeletion: null,\n        markListDeletion: null,\n        markListDeleteId: 0,\n        markSongDeleteIndex: 0,\n        markEditSongIndex: 0,\n        markListEdit : null,\n        oldTitle : null,\n        oldArtist: null,\n        oldYouTubeId: null\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false\n                })\n            }\n\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.ADD_NEW_SONG: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                })\n            }\n\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markDeletion: payload,\n                    markListDeleteId: payload._id\n                });\n            }\n\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_SONG_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markSongDeleteIndex: payload.markListDeleteIndex,\n                    markListDeletion: payload.markListDeletion\n                });\n            }\n\n            // PREPARE TO Edit A LIST\n            case GlobalStoreActionType.MARK_SONG_FOR_EDITION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markEditSongIndex: payload.markEditSongIndex,\n                    markListEdit: payload.markListEdit,\n                    oldTitle : payload.oldTitle,\n                    oldArtist: payload.oldArtist,\n                    oldYouTubeId: payload.oldYouTubeId\n                });\n            }\n\n            // PREPARE TO Edit A LIST\n            case GlobalStoreActionType.EDIT_SONG: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markEditSongIndex: 0,\n                    markListEdit: null\n                });\n            }\n\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.DELETE_SONG: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markListDeletion: null,\n                    markListDeleteIndex: 0\n                });\n            }\n\n            case GlobalStoreActionType.LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markListDeletion: null,\n                    markListDeleteId: 0\n                });\n            }\n\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n\n            case GlobalStoreActionType.DRAG_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                });\n            }\n\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true\n                });\n            }\n\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    async function getListPairs() {\n                        response = await api.getPlaylistPairs();\n                        if (response.data.success) {\n                            let pairsArray = response.data.idNamePairs;\n                            storeReducer({\n                                type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                payload: {\n                                    idNamePairs: pairsArray,\n                                    playlist: playlist\n                                }\n                            });\n                        }\n                    }\n                    getListPairs(playlist);\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    store.createNewList = function () {\n        async function asyncCreateNewList() {\n            let newName = \"Untitled\";\n\n            let newList = {\n                name: newName,\n                songs: []\n            }\n            let response = await api.createPlaylist(newList);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                async function getListPairs() {\n                    response = await api.getPlaylistPairs();\n                    if (response.data.success) {\n                        let pairsArray = response.data.idNamePairs;\n                        storeReducer({\n                            type: GlobalStoreActionType.CREATE_NEW_LIST,\n                            payload: {\n                                idNamePairs: pairsArray,\n                                playlist: playlist\n                            }\n                        });\n                    }\n                }\n                getListPairs(playlist);\n            }\n\n        }\n        asyncCreateNewList();\n    }\n\n    store.addAddSongTransaction = function () {\n        let transaction = new CreateSong_Transaction(store, store.currentList.songs.length);\n        tps.addTransaction(transaction);\n    }\n\n    store.addSong = function () {\n        async function asyncAddNewSong() {\n         \n            let newName = \"Untitled\";\n            let newArtist = \"Undefined\";\n            let newId = \"dQw4w9WgXcQ\";\n            let id = store.currentList._id;\n\n            let newSong = {\n                title : newName,\n                artist : newArtist,\n                youTubeId : newId\n            }\n\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                let len = playlist.songs.length;\n                playlist.songs[len] = newSong;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(id, playlist);\n                    //playlist = response.data.playlist;\n                    if (response.data.success) {\n                        storeReducer({\n                            type: GlobalStoreActionType.ADD_NEW_SONG,\n                            payload: {\n                                playlist: playlist\n                            }\n                        });\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncAddNewSong();\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n\n    store.deleteList = function(id) {\n        store.showDeleteListModal();\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n                        payload: playlist\n                    })\n                }\n            }\n        }\n        asyncSetCurrentList(id)\n    }\n\n    store.deleteSong = function(index) {\n        store.showDeleteSongModal();\n        async function asyncSetCurrentList() {\n            let response = await api.getPlaylistById(store.currentList._id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n                        payload: {\n                        markListDeleteIndex: index,\n                        markListDeletion : playlist\n                        }\n                    })\n                }\n            }\n        }\n        asyncSetCurrentList()\n    }\n\n    store.remove = function(index) {\n        async function asyncSetCurrentList(index) {\n            let response = await api.getPlaylistById(store.currentList._id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.songs.splice(index, 1);\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(store.currentList._id, playlist);\n                    //playlist = response.data.playlist;\n                    if (response.data.success) {\n                        storeReducer({\n                            type: GlobalStoreActionType.DELETE_SONG,\n                            payload: {\n                                playlist: playlist\n                            }\n                        });\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncSetCurrentList(index)\n    }\n\n    store.createSong = function (stack1,stack2) {\n        let list = store.currentList;\n        let arr = [];\n        let index = stack2.pop();\n        let data = stack1.pop();\n        let j = 0;\n        for (let i = 0 ; i <= list.songs.length;i++){\n            if (i === index){\n                arr[i] = data;\n            } else {\n            arr[i] = list.songs[j];\n            j++;\n            }\n        }   \n        async function updateList(list) {\n            let response = await api.updatePlaylistById(store.currentList._id, list);\n            let playlist = response.data.playlist;\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.ADD_NEW_SONG,\n                    payload: {\n                        playlist: playlist\n                    }\n                });\n            }\n        }\n        updateList(list);\n    }\n\n    store.delete = function(id) {\n        async function asyncDeleteList(id) {\n            let response = await api.deletePlaylistById(id);\n            let playlist = response.data.playlist;\n            if (response.data.success) {\n                async function getListPairs() {\n                    response = await api.getPlaylistPairs();\n                    if (response.data.success) {\n                        let pairsArray = response.data.idNamePairs;\n                        storeReducer({\n                            type: GlobalStoreActionType.LIST_FOR_DELETION,\n                            payload: {\n                               idNamePairs: pairsArray,\n                               playlist: playlist\n                            }\n                        })\n                    }\n                }\n                getListPairs()\n            }\n        }\n        asyncDeleteList(id)\n    }\n\n    store.editSong = function (index, song) {\n        let t = song.title;\n        let a = song.artist;\n        let y = song.youTubeId;\n        store.showEditSongModal(t,a,y);\n        async function asyncSetCurrentSong() {\n            let response = await api.getPlaylistById(store.currentList._id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.MARK_SONG_FOR_EDITION,\n                        payload: {\n                        markEditSongIndex: index,\n                        markListEdit : playlist,\n                        oldTitle : t,\n                        oldArtist: a,\n                        oldYouTubeId: y\n                        }\n                    })\n                }\n            }\n        }\n        asyncSetCurrentSong()\n\n    }\n\n    store.editMarkedSong = function(index) {\n        let newTitle = document.getElementById(\"tname\").value; //new value\n        let newArtist = document.getElementById(\"aname\").value; //new value\n        let newYouTubeId= document.getElementById(\"yname\").value; //new value\n        store.addEditSongTransaction(store.oldTitle,store.oldArtist,store.oldYouTubeId,\n            newTitle,newArtist,newYouTubeId,index);\n        //this.hideEditSongModal();\n    }\n\n    store.edit = function(title,artist,youTubeId,index) {\n        async function asyncEditSong(index) {\n            let response = await api.getPlaylistById(store.currentList._id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.songs[index].title = title;\n                playlist.songs[index].artist = artist;\n                playlist.songs[index].youTubeId = youTubeId;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        let playlist = response.data.playlist;\n                        storeReducer({\n                            type: GlobalStoreActionType.EDIT_SONG,\n                            payload: {\n                                playlist: playlist\n                            }\n                        });\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncEditSong(index);\n\n    }\n\n    store.moveSong = function (start, end){\n        let list = store.currentList;\n\n        // WE NEED TO UPDATE THE STATE FOR THE APP\n        if (start < end) {\n            let temp = list.songs[start];\n            for (let i = start; i < end; i++) {\n                list.songs[i] = list.songs[i + 1];\n            }\n            list.songs[end] = temp;\n        }\n        else if (start > end) {\n            let temp = list.songs[start];\n            for (let i = start; i > end; i--) {\n                list.songs[i] = list.songs[i - 1];\n            }\n            list.songs[end] = temp;\n        }\n        async function updateList(list) {\n            let response = await api.updatePlaylistById(list._id, list);\n            list = response.data.playlist;\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.DRAG_LIST,\n                    payload: {\n                        playlist: list\n                            }\n                });\n            }\n        }\n        updateList(list);\n    }\n\n    store.addMoveSongTransaction = function (start, end) {\n        let transaction = new MoveSong_Transaction(store, start, end);\n        tps.addTransaction(transaction);\n    }\n\n    store.addRemoveSongTransaction = function (index) {\n        let stack1 = [];\n        let stack2 = [];\n        let song = store.currentList.songs[index]\n        let transaction = new RemoveSong_Transaction(store, stack1,stack2, index, song);\n        tps.addTransaction(transaction);\n    }\n\n    store.addEditSongTransaction = function (oldTitle,oldArtist,oldSongId,newTitle,newArtist,newSongId,index) {\n        let transaction = new UpdateSong_Transaction(store, oldTitle,oldArtist,oldSongId,newTitle,newArtist,newSongId,index);\n        tps.addTransaction(transaction);\n    }\n\n\n    store.showDeleteListModal = function () {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n\n    store.hideDeleteListModal = function (){\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n    store.showDeleteSongModal = function () {\n        let modal = document.getElementById(\"delete-song-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n    // THIS FUNCTION IS FOR HIDING THE MODAL\n    store.hideDeleteSongModal =  function (){\n        let modal = document.getElementById(\"delete-song-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n    store.showEditSongModal = function (t,a,y){\n        let modal = document.getElementById(\"edit-song-modal\");\n        document.getElementById(\"tname\").value = t;\n        document.getElementById(\"aname\").value = a;\n        document.getElementById(\"yname\").value = y;\n        modal.classList.add(\"is-visible\");\n    }\n\n    store.hideEditSongModal = function (){\n        let modal = document.getElementById(\"edit-song-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}